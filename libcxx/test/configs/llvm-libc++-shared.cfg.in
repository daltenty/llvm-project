@AUTO_GEN_COMMENT@

@SERIALIZED_LIT_PARAMS@

#
# This testing configuration handles running the test suite against LLVM's libc++
# using a shared library.
#

LIBCXX_ROOT = "@LIBCXX_SOURCE_DIR@"
INSTALL_ROOT = "@CMAKE_BINARY_DIR@"
COMPILER = "@CMAKE_CXX_COMPILER@"
EXEC_ROOT = "@LIBCXX_BINARY_DIR@"
CMAKE_OSX_SYSROOT = "@CMAKE_OSX_SYSROOT@"
INCLUDE_DIR = "@LIBCXX_INSTALL_INCLUDE_DIR@"
INCLUDE_TARGET_DIR = "@LIBCXX_INSTALL_INCLUDE_TARGET_DIR@"
LIBRARY_DIR = "@LIBCXX_INSTALL_LIBRARY_DIR@"

import os
import pipes
import platform
import site
import sys
site.addsitedir(os.path.join(LIBCXX_ROOT, 'utils'))
import libcxx.test.features
import libcxx.test.format
import libcxx.test.newconfig
import libcxx.test.params

# Configure basic properties of the test suite
config.name = 'llvm-libc++-shared'
config.test_source_root = os.path.join(LIBCXX_ROOT, 'test')
config.test_format = libcxx.test.format.CxxStandardLibraryTest()
config.recursiveExpansionLimit = 10
config.test_exec_root = EXEC_ROOT

# platform specific helpers
def _extra_compile_flags():
    if platform.system() == 'AIX':
        return '-D__LIBC_NO_CPP_MATH_OVERLOADS__'
    else:
        return ''

# Configure basic substitutions
runPy = os.path.join(LIBCXX_ROOT, 'utils', 'run.py')
config.substitutions.append(('%{cxx}', COMPILER))
config.substitutions.append(('%{flags}',
    '-isysroot {}'.format(CMAKE_OSX_SYSROOT) if CMAKE_OSX_SYSROOT else ''
))
config.substitutions.append(('%{compile_flags}',
    '-nostdinc++ {} -isystem {} -isystem {} -I {}'.format(
        _extra_compile_flags(),
        os.path.join(INSTALL_ROOT, INCLUDE_DIR),
        os.path.join(INSTALL_ROOT, INCLUDE_TARGET_DIR),
        os.path.join(LIBCXX_ROOT, 'test', 'support'))
))
if platform.system() == 'AIX':
    config.substitutions.append(('%{link_flags}',
        '-nostdlib++ -L {0} -lc++ -lc++abi -latomic -pthread'.format(
            os.path.join(INSTALL_ROOT, LIBRARY_DIR))
    ))
else:
    config.substitutions.append(('%{link_flags}',
        '-nostdlib++ -L {0} -lc++ -Wl,-rpath,{0} -pthread'.format(
            os.path.join(INSTALL_ROOT, LIBRARY_DIR))
    ))
config.substitutions.append(('%{exec}',
    '{} {} --execdir %T -- '.format(
        pipes.quote(sys.executable),
        pipes.quote(runPy))
))

# Add parameters and features to the config
libcxx.test.newconfig.configure(
    libcxx.test.params.DEFAULT_PARAMETERS,
    libcxx.test.features.DEFAULT_FEATURES,
    config,
    lit_config
)
